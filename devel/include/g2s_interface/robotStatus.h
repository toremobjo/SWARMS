// Generated by gencpp from file g2s_interface/robotStatus.msg
// DO NOT EDIT!


#ifndef G2S_INTERFACE_MESSAGE_ROBOTSTATUS_H
#define G2S_INTERFACE_MESSAGE_ROBOTSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace g2s_interface
{
template <class ContainerAllocator>
struct robotStatus_
{
  typedef robotStatus_<ContainerAllocator> Type;

  robotStatus_()
    : header()
    , robotBatteryLevel(0)
    , robotAutonomy(0)
    , robotInternalTemperature(0.0)
    , robotInternalHumidity(0.0)
    , robotMode()
    , robotSubMode()  {
    }
  robotStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , robotBatteryLevel(0)
    , robotAutonomy(0)
    , robotInternalTemperature(0.0)
    , robotInternalHumidity(0.0)
    , robotMode(_alloc)
    , robotSubMode(_alloc)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _robotBatteryLevel_type;
  _robotBatteryLevel_type robotBatteryLevel;

   typedef int32_t _robotAutonomy_type;
  _robotAutonomy_type robotAutonomy;

   typedef float _robotInternalTemperature_type;
  _robotInternalTemperature_type robotInternalTemperature;

   typedef float _robotInternalHumidity_type;
  _robotInternalHumidity_type robotInternalHumidity;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robotMode_type;
  _robotMode_type robotMode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robotSubMode_type;
  _robotSubMode_type robotSubMode;




  typedef boost::shared_ptr< ::g2s_interface::robotStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::g2s_interface::robotStatus_<ContainerAllocator> const> ConstPtr;

}; // struct robotStatus_

typedef ::g2s_interface::robotStatus_<std::allocator<void> > robotStatus;

typedef boost::shared_ptr< ::g2s_interface::robotStatus > robotStatusPtr;
typedef boost::shared_ptr< ::g2s_interface::robotStatus const> robotStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::g2s_interface::robotStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::g2s_interface::robotStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace g2s_interface

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'g2s_interface': ['/home/uvlab/swarms/catkin_ws/src/rgi_rsi/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::g2s_interface::robotStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::g2s_interface::robotStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::g2s_interface::robotStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::g2s_interface::robotStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::g2s_interface::robotStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::g2s_interface::robotStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::g2s_interface::robotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7133e2b173cdc8a2ac87eb1a0e69d87";
  }

  static const char* value(const ::g2s_interface::robotStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7133e2b173cdc8aULL;
  static const uint64_t static_value2 = 0x2ac87eb1a0e69d87ULL;
};

template<class ContainerAllocator>
struct DataType< ::g2s_interface::robotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "g2s_interface/robotStatus";
  }

  static const char* value(const ::g2s_interface::robotStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::g2s_interface::robotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
int32 robotBatteryLevel\n\
int32 robotAutonomy\n\
float32 robotInternalTemperature\n\
float32 robotInternalHumidity\n\
string robotMode\n\
string robotSubMode\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::g2s_interface::robotStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::g2s_interface::robotStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.robotBatteryLevel);
      stream.next(m.robotAutonomy);
      stream.next(m.robotInternalTemperature);
      stream.next(m.robotInternalHumidity);
      stream.next(m.robotMode);
      stream.next(m.robotSubMode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct robotStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::g2s_interface::robotStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::g2s_interface::robotStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "robotBatteryLevel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robotBatteryLevel);
    s << indent << "robotAutonomy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robotAutonomy);
    s << indent << "robotInternalTemperature: ";
    Printer<float>::stream(s, indent + "  ", v.robotInternalTemperature);
    s << indent << "robotInternalHumidity: ";
    Printer<float>::stream(s, indent + "  ", v.robotInternalHumidity);
    s << indent << "robotMode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robotMode);
    s << indent << "robotSubMode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robotSubMode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // G2S_INTERFACE_MESSAGE_ROBOTSTATUS_H
