// Generated by gencpp from file g2s_interface/runASCEND_GPSRequest.msg
// DO NOT EDIT!


#ifndef G2S_INTERFACE_MESSAGE_RUNASCEND_GPSREQUEST_H
#define G2S_INTERFACE_MESSAGE_RUNASCEND_GPSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Pose.h>

namespace g2s_interface
{
template <class ContainerAllocator>
struct runASCEND_GPSRequest_
{
  typedef runASCEND_GPSRequest_<ContainerAllocator> Type;

  runASCEND_GPSRequest_()
    : modeId(0)
    , waypointPosition()
    , robotPose()
    , heading(0.0)
    , speed(0.0)  {
    }
  runASCEND_GPSRequest_(const ContainerAllocator& _alloc)
    : modeId(0)
    , waypointPosition(_alloc)
    , robotPose(_alloc)
    , heading(0.0)
    , speed(0.0)  {
    }



   typedef int32_t _modeId_type;
  _modeId_type modeId;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _waypointPosition_type;
  _waypointPosition_type waypointPosition;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _robotPose_type;
  _robotPose_type robotPose;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _speed_type;
  _speed_type speed;




  typedef boost::shared_ptr< ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator> const> ConstPtr;

}; // struct runASCEND_GPSRequest_

typedef ::g2s_interface::runASCEND_GPSRequest_<std::allocator<void> > runASCEND_GPSRequest;

typedef boost::shared_ptr< ::g2s_interface::runASCEND_GPSRequest > runASCEND_GPSRequestPtr;
typedef boost::shared_ptr< ::g2s_interface::runASCEND_GPSRequest const> runASCEND_GPSRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace g2s_interface

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'g2s_interface': ['/home/uvlab/swarms/catkin_ws/src/rgi_rsi/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac07ab3827ee1a7e0a8081d5b50dd334";
  }

  static const char* value(const ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac07ab3827ee1a7eULL;
  static const uint64_t static_value2 = 0x0a8081d5b50dd334ULL;
};

template<class ContainerAllocator>
struct DataType< ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "g2s_interface/runASCEND_GPSRequest";
  }

  static const char* value(const ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 modeId\n\
geometry_msgs/Point waypointPosition\n\
geometry_msgs/Pose robotPose\n\
float32 heading\n\
float32 speed\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.modeId);
      stream.next(m.waypointPosition);
      stream.next(m.robotPose);
      stream.next(m.heading);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct runASCEND_GPSRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::g2s_interface::runASCEND_GPSRequest_<ContainerAllocator>& v)
  {
    s << indent << "modeId: ";
    Printer<int32_t>::stream(s, indent + "  ", v.modeId);
    s << indent << "waypointPosition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.waypointPosition);
    s << indent << "robotPose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.robotPose);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // G2S_INTERFACE_MESSAGE_RUNASCEND_GPSREQUEST_H
